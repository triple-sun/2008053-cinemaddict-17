import { MOVIE_POPUP_CONTROLS_ACTIVE_CLASS } from '../../../const.js';
import { setUserListButtonActiveClass } from '../../../utils/movie.js';
import AbstractView from '../../../framework/view/abstract-view.js';

const POPUP_WATCHLIST_BUTTON_CLASS_SELECTOR = '.film-details__control-button--watchlist';
const POPUP_WATCHED_BUTTON_CLASS_SELECTOR = '.film-details__control-button--watched';
const POPUP_FAVORITE_BUTTON_CLASS_SELECTOR = '.film-details__control-button--favorite';

const createMoviePopupControlsTemplate = (movie) => {
  const {userDetails} = movie;
  const {watchlist, alreadyWatched, favorite} = userDetails;

  return (`
    <section class="film-details__controls">
      <button type="button" class="film-details__control-button film-details__control-button--watchlist ${setUserListButtonActiveClass(watchlist, MOVIE_POPUP_CONTROLS_ACTIVE_CLASS)}" id="watchlist" name="watchlist">Add to watchlist</button>
      <button type="button" class="film-details__control-button film-details__control-button--watched ${setUserListButtonActiveClass(alreadyWatched, MOVIE_POPUP_CONTROLS_ACTIVE_CLASS)} " id="watched" name="watched">Already watched</button>
      <button type="button" class="film-details__control-button film-details__control-button--favorite ${setUserListButtonActiveClass(favorite, MOVIE_POPUP_CONTROLS_ACTIVE_CLASS)}" id="favorite" name="favorite">Add to favorites</button>
    </section>
  `);
};

export default class MoviePopupControlsView extends AbstractView {
  #movie = null;

  constructor(movie) {
    super();
    this.#movie = movie;
  }

  get template() {
    return createMoviePopupControlsTemplate(this.#movie);
  }

  _restoreHandlers = () => {
    this.setWatchlistClickHandler(this._callback.watchlistClick);
    this.setAlreadyWatchedClickHandler(this._callback.alreadyWatchedClick);
    this.setFavoriteClickHandler(this._callback.favoriteClick);
  };

  setWatchlistClickHandler = (callback) => {
    this._callback.watchlistClick = callback;
    this.element.querySelector(POPUP_WATCHLIST_BUTTON_CLASS_SELECTOR).addEventListener('click', this.#watchlistClickHandler);
  };

  setAlreadyWatchedClickHandler = (callback) => {
    this._callback.alreadyWatchedClick = callback;
    this.element.querySelector(POPUP_WATCHED_BUTTON_CLASS_SELECTOR).addEventListener('click', this.#alreadyWatchedClickHandler);
  };

  setFavoriteClickHandler = (callback) => {
    this._callback.favoriteClick = callback;
    this.element.querySelector(POPUP_FAVORITE_BUTTON_CLASS_SELECTOR).addEventListener('click', this.#favoriteClickHandler);
  };

  #watchlistClickHandler = (evt) => {
    evt.preventDefault();
    this._callback.watchlistClick();
  };

  #alreadyWatchedClickHandler = (evt) => {
    evt.preventDefault();
    this._callback.alreadyWatchedClick();
  };

  #favoriteClickHandler = (evt) => {
    evt.stopPropagation();
    evt.preventDefault();
    this._callback.favoriteClick();
  };
}
